/*
Given two positive integers left and right, find the two integers num1 and num2 such that:

left <= nums1 < nums2 <= right .
nums1 and nums2 are both prime numbers.
nums2 - nums1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [nums1, nums2]. If there are multiple pairs satisfying these conditions, return the one with the minimum nums1 value or [-1, -1] if such numbers do not exist.

A number greater than 1 is called prime if it is only divisible by 1 and itself.
*/
class Solution {

    public int[] closestPrimes(int left, int right) {
        int arr[] ={-1,-1};
        int first=0;
        int second=0;
        int diff=Integer.MAX_VALUE;
        if(left<=2 && right!=1){
                arr[0] = 2;
                arr[1] =3;
                return arr;    
            }
            if(left%2==0){
                left++;
            }
    
    outer:for(int n=left;n<=right;n+=2){
            int count =0;
            if(n==1)
            continue;
            
            for(int i=2;i<=Math.sqrt(n);i++){
                if(n%i==0){
                    count++;
                    break;
                }
            }
            if(count==0){
            second= n;
            if(first>0){
            if(diff > second-first){
                diff = second-first;
                arr[0] =first;
                arr[1] =second;
            }
            }
            first =second;
            if(diff==1 ||diff == 2){
                break outer;
            }                   
            }
        }
        return arr;
}
}
